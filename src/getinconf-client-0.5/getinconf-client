#!/bin/sh
#
# Copyright © 2013 Fundació Guifi.net 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#	Agustí Moll i Garcia
#
# Base in synctincvpn

TINCPATH=/etc/tinc
TINCDAEMON=/usr/sbin/tincd
DECRYPTFILE=/usr/sbin/decrypt
TINCDINIT=/etc/init.d/tinc
NETSBOOTFILE=/etc/tinc/nets.boot
CONFIGFILE=/etc/getinconf-client.conf
DEBUGFILE=/tmp/getinconf-client.log

# DEBUG
wlog(){
	[ -f ${DEBUGFILE} ] && echo "[$(date +%c)]: $*" >> ${DEBUGFILE}
}

# COMFIGURE
variables="GTC_SERVER_URL NETWORK_NAME NETWORK_KEY INTERNAL_DEV"
othersvariables="PORT=665 GETINCONF_IGNORE=1"
write_file()
{
	echo '#!/bin/sh'
	echo ''
	echo '# Automatically generate file'
	for i in $variables
	do
		eval echo $i=\${$i}
	done
	for i in $othersvariables
	do
		echo "# ${i}"
	done
}

unset_variables()
{
	local i
	local t

	for i in $variables
	do
		unset $i
	done
	for i in $othersvariables
	do
		t=$(echo $i|cut -d "=" -f 1)
		unset $t
	done
}

read_file()
{
	unset_variables
	. $CONFIGFILE
}

config_file()
{
	local i

	read_file
	for i in $variables
	do
		eval echo -n "Valor de $i [\${$i}]:"
		eval tmpold=\${$i}
		read $i
		eval actval=\${$i}
		if [ -z $actval ]
		then
			eval $i=$tmpold
		fi
	done 
	write_file > $CONFIGFILE

}
ask_install()
{
	local i
	read -p "Execute getinconf-client now (Y/n)? " i
	 if [ -z "$i" ]; then
		i="Y"
	fi
	case "$i" in
		Y*|y*) return 0 ;;
		N*|n*) return 1 ;;
	esac

}

# UNINSTALL
uninstall_function()
{
	read_file
	if [ ! -z ${NETWORK_NAME} ]
	then
		${TINCDINIT} stop
		cat ${NETSBOOTFILE} |grep -v ^${NETWORK_NAME} > ${NETSBOOTFILE}.new
		rm ${NETSBOOTFILE}
		mv ${NETSBOOTFILE}.new ${NETSBOOTFILE}
		rm -rf ${TINCPATH}/${NETWORK_NAME}
		${TINCDINIT} start
	fi
}
# LOAD 
test_nat() {

	local MYIP
	# Get myIP
	MYIP=$(wget ${WGETOPTIONS} -qO - "${GTC_SERVER_URL}${GTC_SERVER_MYIP}")
	# Compare my IP with my IP Connect.
	[ "$INTERNAL_IP" != "$MYIP" ] && NAT=1 || NAT=0
}
msg_error() {
	echo $1
	exit $2
}
add_file() {
    FULLFILENAME=$1
    TEMPDATA="$(cat $FULLFILENAME)"
    FILENAME="$2"
    POSTDATA="
${POSTDATA}--${BOUNDARY}
Content-Disposition: form-data; name=\"$FILENAME\"; filename="$FILENAME"
Content-Type: text/plain

${TEMPDATA}

"
}

end_boundary() {
        POSTDATA="${POSTDATA}--${BOUNDARY}- -"
}


call_wget() {
	LFILE=$2
	LURL=$1
	add_file "${LFILE}" rsakeypub
	end_boundary

	wget ${WGETOPTIONS} --header="Content-Type: multipart/form-data; boundary=${BOUNDARY}" --post-data="${POSTDATA}" -qO - ${LURL}
}

add_network_netsboot() {
	echo "Buscar si esta a netboot!"	
 	$(cat ${NETSBOOTFILE}|grep -qe ^${NETWORK_NAME}) &&  echo "[NO]" || (echo "[YES]"; echo "${NETWORK_NAME}" >> ${NETSBOOTFILE})
}

load() {

	POSTDATA=""
	BOUNDARY="-----02CAFFEEBABE"
	ALLCONFIG=1
	HOSTNAME=$(hostname)
	WGETOPTIONS="-T 10 -t 1"
	GTC_SERVER_GETPATH="/nodes/get2"
	GTC_SERVER_MYIP="/pages/ip"

	if [ -f ${CONFIGFILE} ];
	then
		read_file 
		if [ ! -z ${GETINCONF_IGNORE} ]
		then
			echo "Remove GETINCONF_IGNORE from ${CONFIGFILE}."
			exit
		fi
	else 
		echo "Config file (${CONFIGFILE}) doesn't exist."
		exit
	fi

	INTERNAL_IP=$(ip addr |grep "global ${INTERNAL_DEV}$"|awk '{print $2}'| sed 's/\(.*\)\/.*/\1/')
	MAC=$(ip addr show dev ${INTERNAL_DEV}|grep link/ether | awk '{print $2}' | tr "[:lower:]" "[:upper:]")
	MAC_ENCODE=$(echo "${MAC}" | awk '{gsub(/:/,"-"); print $1}')
	HASH_MAC=$(echo -n "${MAC}${NETWORK_KEY}${NETWORK_NAME}" | md5sum | awk '{print $1}')
	URL="${GTC_SERVER_URL}${GTC_SERVER_GETPATH}"


	mkdir -p ${TINCPATH}
	cd ${TINCPATH}
	if [ ! -f rsa_key.priv ]
	then
		echo -e "\n\n"|${TINCDAEMON} -K
	fi

	if [ -z "$INTERNAL_IP" ] 
	then
		INTERNAL_IP="0"
		NAT=1
	else
		test_nat
		if [ $NAT -eq 0 ] 
		then
			wlog "NAT => No NAT, direct connection."
		else
			wlog "NAT => Yes, connect through NAT system."
			INTERNAL_IP=0
		fi 
	fi
	if [ -z $PORT ]
	then
		PORT=665
	fi

	URL=${URL}/${HASH_MAC}/$NETWORK_NAME/${MAC_ENCODE}/$HOSTNAME/$INTERNAL_IP/$PORT/$ALLCONFIG
	wlog "URL => ${URL}"
	#CONFIG=$(call_wget ${URL} ${TINCPATH}/rsa_key.pub | ${DECRYPTFILE} ${TINCPATH}/rsa_key.priv)
	CONFIG=$(call_wget ${URL} ${TINCPATH}/rsa_key.pub)
	echo -n "Load config...."
	wlog "${CONFIG}"
	if echo "$CONFIG" | grep -q "^#!/bin/"
	then
		echo "OK"
		sh -c "$CONFIG"
		echo -n "Need install net tinc to ${NETSBOOTFILE}? "
		add_network_netsboot
		${TINCDINIT} restart
	else
		echo "Error."
		return 1
	fi
}

case "$1" in
    install)
		load
    ;;

    configure)
		config_file
		if ask_install; then
			load
		fi
    ;;

    uninstall)
		uninstall_function		
	;;
    *)
        echo "Use: $0 <install|configure|uninstall>"
    ;;
esac
